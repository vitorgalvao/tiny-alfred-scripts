#!/bin/bash

readonly program="$(basename "${0}")"
readonly workflow_dir="$(pwd)"

function trash {
  # Due to a JXA bug (rdar://42477993), deleting more than one path at once fails if at least one of them is a directory.
  # To go around it, here we delete all files, followed by each directory

  /usr/bin/osascript -l JavaScript -e "
    function run(argv) {
      const SystemEvents = Application('System Events')
      paths = argv.map(p => Path(p))
      let files = []
      let dirs = []

      paths.forEach(p => { SystemEvents.aliases.byName(p.toString()).typeIdentifier() == 'public.folder' ?  dirs.push(p) : files.push(p) })

      Application('Finder').delete(files)
      dirs.forEach(p => Application('Finder').delete(p))
  }" "${@}"
}

function usage {
  echo "
   Package and update a Workflow from the Workflows directory to the vitorgalvao/alfred-workflows github repo. If Workflow does not exist in repo, it will be created.

    Usage:
      ${program} <commit_message>

      It is required to set the environment variable 'workflows_local_repo', with the path to the local development repository.

    Options:
      -h, --help   Show this help.
  " | sed -E 's/^ {4}//'
}

function bump_version {
  local -r old_version="${1}"
  local -r old_year="$(cut -d'.' -f1 <<< "${old_version}")"
  local -r old_release="$(cut -d'.' -f2 <<< "${old_version}")"
  local -r new_year="$(date '+%Y')"

  if [[ "${old_year}" -ne "${new_year}" ]]; then
    echo -n "${new_year}.1"
  else
    echo -n "${new_year}.$(bc <<< "${old_release} + 1")"
  fi
}

if [[ "${1}" =~ ^(-h|--help)$ ]]; then
  usage
  exit 0
fi

if [[ -z "${workflows_local_repo}" ]]; then
  usage
  exit 1
fi

if [[ "${#}" -ne 1 ]]; then
  echo "As a single argument to script, give what you want as the commit message (the workflow’s name will be automatically prepended)." >&2
  exit 1
fi

if [[ ! -d "${workflows_local_repo}" ]]; then
  echo "It seems '${workflows_local_repo}' does not exist. You have to set it as the local repository to update workflows." >&2
  exit 1
fi

if [[ "${workflow_dir}" != *'Alfred.alfredpreferences/workflows/'* ]] || [[ ! -f "${workflow_dir}/info.plist" ]]; then
  echo "You need to be inside the workflow’s root directory in Alfred’s preferences directory." >&2
  exit 1
fi

readonly commit_message="${1}"
readonly workflow_name="$(/usr/libexec/PlistBuddy -c 'print name' "${workflow_dir}/info.plist")"
readonly workflow_readme="$(/usr/libexec/PlistBuddy -c 'print readme' "${workflow_dir}/info.plist")"
readonly workflow_old_version="$(/usr/libexec/PlistBuddy -c 'print version' "${workflow_dir}/info.plist")"
readonly workflow_new_version="$(bump_version "${workflow_old_version}")"
readonly workflow_file="${workflow_name}.alfredworkflow"
readonly tmp_workflow_file="$(mktemp -d)/${workflow_file}"

/usr/libexec/PlistBuddy -c "set version ${workflow_new_version}" "${workflow_dir}/info.plist"

find "${workflow_dir}" -iname '.DS_Store' -delete

# If there are Workflow Environment Variables with "Don't Export", make copy of workflow first and empty variables before packaging
if /usr/libexec/PlistBuddy -c 'Print variablesdontexport' "${workflow_dir}/info.plist" &> /dev/null; then
  readonly workflow_dir_to_package="$(mktemp -d)"
  cp -R "${workflow_dir}/"* "${workflow_dir_to_package}"

  readonly tmp_info_plist="${workflow_dir_to_package}/info.plist"
  /usr/libexec/PlistBuddy -c 'print variablesdontexport' "${tmp_info_plist}" | grep '    ' | sed -E 's/ {4}//' | xargs -I {} /usr/libexec/PlistBuddy -c "set variables:'{}' ''" "${tmp_info_plist}"
else
  readonly workflow_dir_to_package="${workflow_dir}"
fi

DITTONORSRC=1 ditto -ck "${workflow_dir_to_package}" "${tmp_workflow_file}"

[[ -d "${workflows_local_repo}/${workflow_name}" ]] && trash "${workflows_local_repo}/${workflow_name}"
mkdir -p "${workflows_local_repo}/${workflow_name}"
cd "${workflows_local_repo}/${workflow_name}" || exit 1
cp -R "${workflow_dir}" 'source'
mv "${tmp_workflow_file}" .
echo "${workflow_readme}" > README.md

echo -n 'Pushing to repository… '
git add .
git commit --all --message "${workflow_name}: ${commit_message}" --quiet
if git push origin master --quiet; then
  echo 'Pushed.'
else
  echo 'There was and error pushing to the repository.' >&2
  exit 1
fi

open "https://www.alfredforum.com/search/?&q=${workflow_name}"

echo -n "Update.


${commit_message}.


To update, download the latest version (same URL) or wait a few days and it’ll prompt you to on next usage, since it uses [url=http://www.alfredforum.com/topic/9224-oneupdater-—-update-workflows-with-a-single-node/][background=#eee][font=courier,monospace]OneUpdater[/font][/background][/url]." | sed -E 's/^ {2}//' | pbcopy

echo 'Copied template message to clipboard to post in the forum.'
